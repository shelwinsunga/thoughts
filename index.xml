<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on</title><link>https://shelwinsunga.github.io/thoughts/</link><description>Recent content in Notes on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://shelwinsunga.github.io/thoughts/index.xml" rel="self" type="application/rss+xml"/><item><title>B-Tree Analysis</title><link>https://shelwinsunga.github.io/thoughts/notes/data-structures/btreeinvariant/</link><pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/notes/data-structures/btreeinvariant/</guid><description>Bushiness and Invariants Unlike in BSTs, where if you insert things in order the tree will be spindly, in B-Trees, if you insert things in order, the tree will be bushy no matter what.</description></item><item><title>B-Tree</title><link>https://shelwinsunga.github.io/thoughts/notes/data-structures/Btree/</link><pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/notes/data-structures/Btree/</guid><description>B-Trees are a kind of self-balancing BST.
B-Trees To start, let&amp;rsquo;s make a rule to never add a new leaf. Instead, we&amp;rsquo;ll just add any new value to a node.</description></item><item><title>Abstract Data Types</title><link>https://shelwinsunga.github.io/thoughts/notes/data-structures/ADT/</link><pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/notes/data-structures/ADT/</guid><description>Abstract Data types are defined by their operations, not their implementation.
The Stack ADT The Stack ADT supports the following operations:</description></item><item><title>BST Operations</title><link>https://shelwinsunga.github.io/thoughts/notes/data-structures/bstoperations/</link><pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/notes/data-structures/bstoperations/</guid><description>Search If searchKey = T.key, return.
If searchKey &amp;lt; T.key, search T.left; If searchKey &amp;gt; T.key, search T.right; Runtime to complete search on a bushy BST in the worst case is $O(log(n))$.</description></item><item><title>BST Performance</title><link>https://shelwinsunga.github.io/thoughts/notes/data-structures/BStperformance/</link><pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/notes/data-structures/BStperformance/</guid><description>Height and average depth are important properties of BSTs:
The depth of a node is how far it is from the root The height of a tree is the depth of its deepest leaf The average depth of a tree is the average depth of a tree&amp;rsquo;s nodes.</description></item><item><title>BST Tree Height</title><link>https://shelwinsunga.github.io/thoughts/notes/data-structures/BSTheight/</link><pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/notes/data-structures/BSTheight/</guid><description>Height varies dramatically between &amp;ldquo;bushy&amp;rdquo; and &amp;ldquo;spindly&amp;rdquo; trees.
Bushy trees have a height of roughly $log(n)$. Spindly trees have a height of $n$.</description></item><item><title>Trees</title><link>https://shelwinsunga.github.io/thoughts/notes/data-structures/trees/</link><pubDate>Sun, 25 Dec 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/notes/data-structures/trees/</guid><description>A tree consists of
A set of nodes A set of edges that connect those nodes Constraint: There is exactly one path between any two nodes.</description></item><item><title>Introduction to Databases</title><link>https://shelwinsunga.github.io/thoughts/notes/ds/introdb/</link><pubDate>Mon, 21 Nov 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/notes/ds/introdb/</guid><description>In a very long sentence, Database Management Systems (DBMS) provides efficient, reliable, convenient, and safe multi-user storage of and access to massive amounts of persistent data.</description></item><item><title>A Brief Overview of Netflow</title><link>https://shelwinsunga.github.io/thoughts/thoughts/netflow/</link><pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/thoughts/netflow/</guid><description>One of the challenges of managing a network is understanding what&amp;rsquo;s actually going through that network. We have a lot of different protocols buzzing around - HTTPS, SMTP, SFTP, DNS, etc - so how do we answer questions like how much of each protocol is happening?</description></item><item><title>Cow Signal</title><link>https://shelwinsunga.github.io/thoughts/comp/cowsignal/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/comp/cowsignal/</guid><description>USACO 2016 December Contest, Bronze - Problem 3. The Cow-Signal
Problem Statement Bessie and her cow friends are playing as their favorite cow superheroes.</description></item><item><title>Re-Reading</title><link>https://shelwinsunga.github.io/thoughts/thoughts/rereading/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/thoughts/rereading/</guid><description>From time to time I open books that I&amp;rsquo;ve already crawled through and squeezed once more. It often feels like a conversation with an old friend: the hurried catch-up, the gradual memories spurring from a long time past, the way their charisma and language just hit you and you&amp;rsquo;re questioning what you&amp;rsquo;re doing in life.</description></item><item><title>The Lost Cow</title><link>https://shelwinsunga.github.io/thoughts/comp/lostcow/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/comp/lostcow/</guid><description>USACO 2017 US Open Contest, Bronze - Problem 1. The Lost Cow
Problem Statement Farmer John has lost his prize cow Bessie, and he needs to find her!</description></item><item><title>Fault Tolerance</title><link>https://shelwinsunga.github.io/thoughts/notes/6.824/FaultTolerance/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/notes/6.824/FaultTolerance/</guid><description>See Also: Scalability, Infrastructure for Applications, and Introduction to Distributed Systems
A single computer can often stay up for years. However, if you&amp;rsquo;re building a system with thousands of computers, that means you&amp;rsquo;re going to have about 3 computer failiures per day.</description></item><item><title>Minimalistic Workout</title><link>https://shelwinsunga.github.io/thoughts/notes/life/minimal/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/notes/life/minimal/</guid><description>Full Body Day 1 Warm up: Brisk Walking and Dynamic Stretches
Flat Dumbbell Press: 1x4-6 reps heavy 1x 8-10 reps backoff weight Dumbbell Romanian Deadlift: 3x8-10 2-grip Lat Pulldown: 2x10-12 reps Dumbbell Step Up: 1x8-10 Overheap Cable Triceps Extension 1x12-15 reps + Dropset Machine Lateral Raise: 1x12-15 reps Leg press toe raise 1x12-15 reps Full Body Day 2 Warm up: Brisk Walking and Dynamic Stretches</description></item><item><title>Infrastructure for Applications</title><link>https://shelwinsunga.github.io/thoughts/notes/6.824/Infrastructure-for-Applications/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/notes/6.824/Infrastructure-for-Applications/</guid><description>See also: Introduction to Distributed Systems
A lot of our goal is to discover abstractions, or ways of simplifying the interface of distributed storage and infrastructure so that it is easy to build applications on top of it.</description></item><item><title>Introduction to Distributed Systems</title><link>https://shelwinsunga.github.io/thoughts/notes/6.824/DistributedSystemsIntro/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/notes/6.824/DistributedSystemsIntro/</guid><description>The core of a distributed system is a set of cooperating computers that are communicating with each other over a network to get some coherent task done.</description></item><item><title>System Scalability</title><link>https://shelwinsunga.github.io/thoughts/notes/6.824/Scalability/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://shelwinsunga.github.io/thoughts/notes/6.824/Scalability/</guid><description>Usually the high-level goal of building a distributed system is to build something with scalable speed-up. It&amp;rsquo;s the idea that with 2 times the computer resources, I should get 2 times the throughput.</description></item></channel></rss>